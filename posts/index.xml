<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on raidancampbell</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on raidancampbell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 May 2020 14:58:47 -0700</lastBuildDate>
    
	<atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design Considerations for Context in Go</title>
      <link>http://localhost:1313/posts/context-in-go/</link>
      <pubDate>Fri, 22 May 2020 14:58:47 -0700</pubDate>
      
      <guid>http://localhost:1313/posts/context-in-go/</guid>
      <description>A brief introduction to Context  &amp;ldquo;Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.&amp;rdquo; - golang.org
 Context in Go is often critiqued for handling two distinct scenarios under one tool: cancellation and scoped data. While I tend to agree, this post is aimed to inform rather than persuade.
Contexts are derived: each child context is made by adding additional cancellations or values from its parent.</description>
    </item>
    
  </channel>
</rss>