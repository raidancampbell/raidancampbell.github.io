<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on raidancampbell</title>
    <link>https://raidancampbell.com/posts/</link>
    <description>Recent content in Posts on raidancampbell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jun 2020 21:58:09 -0700</lastBuildDate>
    
	<atom:link href="https://raidancampbell.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Low Effort Blog Posts Part I: DNS Sinkholing</title>
      <link>https://raidancampbell.com/posts/low-effort-i-dns-sinkholing/</link>
      <pubDate>Sun, 07 Jun 2020 21:58:09 -0700</pubDate>
      
      <guid>https://raidancampbell.com/posts/low-effort-i-dns-sinkholing/</guid>
      <description>What I want my laptop to route certain requests differently on my home network, and prevent them on public networks.
Why I wanted to try this syslog thing, but didn&amp;rsquo;t like the idea of hardcoding a local IP. Even within the 192.168.0.0/16 block, switching wifi networks (e.g. going to a coffee shop) would mean my laptop would try and send logs to the configured IP. No good.
How Configure your router to resolve something like sinkhole.</description>
    </item>
    
    <item>
      <title>Instrumenting Go Binaries for Integration Test Coverage</title>
      <link>https://raidancampbell.com/posts/runtime-instrumentation/</link>
      <pubDate>Sat, 06 Jun 2020 23:30:51 -0700</pubDate>
      
      <guid>https://raidancampbell.com/posts/runtime-instrumentation/</guid>
      <description>An approach for measuring coverage of integration or manual testing</description>
    </item>
    
    <item>
      <title>Abusing Context in Go Part II: Recovery</title>
      <link>https://raidancampbell.com/posts/abusing-context-part-ii/</link>
      <pubDate>Thu, 04 Jun 2020 16:31:47 -0700</pubDate>
      
      <guid>https://raidancampbell.com/posts/abusing-context-part-ii/</guid>
      <description>A method for recovering context in Go that was omitted somewhere up the callstack</description>
    </item>
    
    <item>
      <title>Abusing Context in Go Part I: Serialization</title>
      <link>https://raidancampbell.com/posts/abusing-context-part-i/</link>
      <pubDate>Mon, 25 May 2020 10:29:46 -0700</pubDate>
      
      <guid>https://raidancampbell.com/posts/abusing-context-part-i/</guid>
      <description>A method for serializing context to allow it to flow between networked hosts</description>
    </item>
    
    <item>
      <title>Design Considerations for Context in Go</title>
      <link>https://raidancampbell.com/posts/context-in-go/</link>
      <pubDate>Fri, 22 May 2020 14:58:47 -0700</pubDate>
      
      <guid>https://raidancampbell.com/posts/context-in-go/</guid>
      <description>An overview on design paradigms for golang&amp;rsquo;s context library</description>
    </item>
    
  </channel>
</rss>